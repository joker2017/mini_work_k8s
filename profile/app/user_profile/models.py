from django.db import models
from hashlib import sha256
from django.contrib.auth.hashers import make_password
import random
# User model representing a user in the system
class Users(models.Model):
    """
    User model with custom fields and hashing password functionality.

    Attributes:
        id: A unique identifier for the user, not generated by Django's default auto-increment.
        full_names: The full name of the user.
        username: A unique username for user identification.
        email: User's email address.
        password: User's password, stored as a hashed value for security.
    """
    id = models.CharField(
        primary_key=True,
        max_length=20,
        blank=True,
        editable=False,
        unique=True,
    )
    full_names = models.CharField(max_length=255)  # User's full name
    username = models.CharField(max_length=255)  # Unique username
    email = models.EmailField(max_length=255, unique=True)  # User's email address
    password = models.CharField(max_length=255)  # Hashed password

    def save(self, *args, **kwargs):
        # Генерация уникального ID, если он еще не установлен
        if not self.id:
            self.id = self.generate_unique_id_number()

        # Хеширование пароля перед сохранением, если он был изменен
        if 'password' in self.__dict__ or not self.pk:
            self.password = make_password(self.password)

        super().save(*args, **kwargs)

    @staticmethod
    def generate_unique_id_number():
        unique_id = ''.join([str(random.randint(0, 9)) for _ in range(20)])
        while Users.objects.filter(id=unique_id).exists():
            unique_id = ''.join([str(random.randint(0, 9)) for _ in range(20)])
        return unique_id


    def __str__(self):
        """
        String representation of the Users model.
        """
        return f'{self.full_names} {self.username}'


# Account model representing a user's account
class Account(models.Model):
    id = models.CharField(
        # max_digits=20,
        # decimal_places=0,
        # models.CharField(
        # default = get_random_string(20, allowed_chars='0123456789'),
        primary_key=True,
        max_length=20,
        blank=True,
        editable=False,
        unique=True,
    )

    balance = models.DecimalField(
        default=0,
        max_digits=20,
        decimal_places=2
    )
    usernameid = models.ForeignKey('Users', default='null', on_delete=models.PROTECT, null=True, related_name='accounts',
                                   blank=True)

    def save(self, *args, **kwargs):
        if not self.id:
            self.id = self.generate_unique_id_number()
        super().save(*args, **kwargs)

    @staticmethod
    def generate_unique_id_number():
        unique_id = ''.join([str(random.randint(0, 9)) for _ in range(20)])
        while Account.objects.filter(id=unique_id).exists():
            unique_id = ''.join([str(random.randint(0, 9)) for _ in range(20)])
        return unique_id


def __str__(self):
        return f"Account ID: {self.id}, Balance: {self.balance}, User: {self.user.usernameid}"

class Meta:
        managed = False
        db_table = 'account_account'
