name: 'Django-k8s-M&C-Action'
description: 'Migrate and collectstatic in k8s with Argo Rollouts'
inputs:
  apps:
    description: 'Name of the app'
    required: true
  kubeconfig:
    description: 'Path to the kubeconfig file'
    required: true
  django_superuser_username:
    description: 'Django superuser username'
    required: true
  django_superuser_email:
    description: 'Django superuser email'
    required: true
  django_superuser_password:
    description: 'Django superuser password'
    required: true
runs:
  using: 'composite'
  steps:
    # Шаг 1: Проверка статуса развертывания и получение имени пода
    - name: Check rollout status and get pod name
      id: get_pod_name
      shell:  bash
      run: |
        # Проверяем статус rollout до достижения состояния "Paused - BlueGreenPause"
        STATUS=""
        while [[ "$STATUS" != *"Paused - BlueGreenPause"* ]]; do
          echo "Checking rollout status..."
          STATUS=$(kubectl argo rollouts status ${{ inputs.apps }}-rollout --watch=false --kubeconfig=${{ inputs.kubeconfig }}) || { echo "Failed to get rollout status"; exit 1; }
          echo "$STATUS"
          if [[ "$STATUS" == *"Paused - BlueGreenPause"* ]]; then
            break
          fi
          sleep 5
        done

        # Цикл для получения списка подов, ждем пока не будет больше одного пода
        while : ; do
         POD_COUNT=$(kubectl get pods -l app=${{ inputs.apps }} -o jsonpath='{.items[*].metadata.name}' -n default --kubeconfig=${{ inputs.kubeconfig }} | wc -w)
         if [ $POD_COUNT -gt 1 ]; then
            break
         fi
         echo "Waiting for more pods..."
         sleep 5
          done


    # Шаг 2: Получение имени последнего пода
    - name: Get the name of the latest pod
      id: get_latest_pod
      shell:  bash
      run: |
        LATEST_POD=$(kubectl get pods -l app=${{ inputs.apps }} --sort-by=.metadata.creationTimestamp -o custom-columns=NAME:.metadata.name,CREATED:.metadata.creationTimestamp --no-headers --kubeconfig=${{ inputs.kubeconfig }} | tail -n 1 | awk '{print $1}') || { echo "Failed to get the latest pod"; exit 1; }
        echo "::set-output name=latest_pod::$LATEST_POD"

    # Шаг 3: Проверка статуса последнего пода
    - name: Check pod status
      id: check_pod_status
      shell:  bash
      run: |
        LATEST_POD=${{ steps.get_latest_pod.outputs.latest_pod }}
        POD_STATUS=""
        while [[ "$POD_STATUS" != "Running" ]]; do
          echo "Checking pod status..."
          POD_STATUS=$(kubectl get pod $LATEST_POD -o=jsonpath='{.status.phase}' --kubeconfig=${{ inputs.kubeconfig }}) || { echo "Failed to get pod status"; exit 1; }
          echo "Pod status: $POD_STATUS"
          if [[ "$POD_STATUS" == "Running" ]]; then
            break
          fi
          sleep 5
        done

    # Шаг 4: Применение миграций Django и сбор статических файлов !!!!
    - name: Apply Django migrations and collect static files
      shell: bash
      run: |

        APP_POD=${{ steps.get_latest_pod.outputs.latest_pod }}
        # Выполняем миграции внутри пода
        kubectl exec $APP_POD -n default --kubeconfig=${{ inputs.kubeconfig }} -- python ./manage.py makemigrations || { echo "Failed to make migrations"; exit 1; }
        kubectl exec $APP_POD -n default --kubeconfig=${{ inputs.kubeconfig }} -- python ./manage.py migrate || { echo "Failed to apply migrations"; exit 1; }
        


    - name: Create or update Django superuser
      run: |
          APP_POD=${{ steps.get_latest_pod.outputs.latest_pod }}
          kubectl exec $APP_POD -n default --kubeconfig=${{ inputs.kubeconfig }} -- /bin/sh -c python ./manage.py shell <<EOF
            from django.contrib.auth import get_user_model
            User = get_user_model()
            username = '${{ inputs.DJANGO_SUPERUSER_USERNAME }}'
            email = '${{ inputs.DJANGO_SUPERUSER_EMAIL }}'
            password = '${{ inputs.DJANGO_SUPERUSER_PASSWORD }}'
            user, created = User.objects.get_or_create(username=username, defaults={'email': email})
            if created:
              user.set_password(password)
              user.is_superuser = True
              user.is_staff = True
              user.save()
              print(f"Superuser {username} created")
            else:
              user.email = email  # Обновляем email, если необходимо
              user.set_password(password)  # Обновляем пароль на случай, если он был изменен
              user.is_superuser = True
              user.is_staff = True
              user.save()
              print(f"Superuser {username} updated")
            EOF
      shell: bash


