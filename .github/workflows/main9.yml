name: CI/CD with Blue-Green Deployment NEW

on:
  workflow_dispatch:

env:
  PROFILE_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/profile:${{ github.sha }}
  ACCOUNT_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/account:${{ github.sha }}
  FOLDER_ID: ${{ secrets.YANDEX_FOLDER_ID }}

jobs:

  lint-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.1

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          check-latest: true

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.6.0

      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          changed=$(ct list-changed --target-branch ${{ github.event.repository.default_branch }})
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Run chart-testing (lint)
        if: steps.list-changed.outputs.changed == 'true'
        run: ct lint --target-branch ${{ github.event.repository.default_branch }}

      - name: Create kind cluster
        if: steps.list-changed.outputs.changed == 'true'
        uses: helm/kind-action@v1.8.0

      - name: Run chart-testing (install)
        if: steps.list-changed.outputs.changed == 'true'
        run: ct install --target-branch ${{ github.event.repository.default_branch }}

  build-account:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Account
        uses: docker/build-push-action@v3
        with:
          context: ./account
          file: ./account/Dockerfile
          push: true
          tags: ${{ env.ACCOUNT_IMAGE }}

  build-profile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Profile
        uses: docker/build-push-action@v3
        with:
          context: ./profile
          file: ./profile/Dockerfile
          push: true
          build-args: SERVER_URL=${{ secrets.API_SERVER_URL }}
          tags: ${{ env.PROFILE_IMAGE }}

  deploy-in-k8s:
    runs-on: ubuntu-latest
    needs: [build-profile, build-account, lint-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        id: install
        with:
          version: 'v1.28.2'

      - name: Install Yandex Cloud CLI non-interactively
        run: |
          curl https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash -s -- -i $HOME/.yandex-cloud -n
          echo "$HOME/.yandex-cloud/bin" >> $GITHUB_PATH

      # Determining current and next application versions
      - name: Determine current and next versions
        run: |
          CURRENT_VERSION=$(echo "${{ secrets.KUBECONFIG }}" | kubectl --kubeconfig=/dev/stdin get configmap app-version -o=jsonpath='{.data.CURRENT_VERSION}' || echo "")
          if [[ "$CURRENT_VERSION" == "" ]]; then
            echo "This is a fresh install."
            NEXT_VERSION="green"
          elif [[ "$CURRENT_VERSION" == "blue" ]]; then
            NEXT_VERSION="green"
          else
            NEXT_VERSION="blue"
          fi
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      # Deploying applications using Helm
      - name: Deploy applications using Helm
        run: |
          # Deploying Account application
          echo "..." | helm --kubeconfig=/dev/stdin upgrade --install account-green ./chart --set image=${{ env.ACCOUNT_IMAGE }},deploymentColor=green
          # Deploying Profile application
          echo "..." | helm --kubeconfig=/dev/stdin upgrade --install profile-green ./chart --set image=${{ env.PROFILE_IMAGE }},deploymentColor=green
          # Applying Ingress, if it's a fresh installation
          if [[ "$CURRENT_VERSION" == "" ]]; then
             echo "..." | kubectl --kubeconfig=/dev/stdin apply -f ./chart/templates/ingress.yaml
          fi

      # Updating application version information
      - name: Update current version information
        run: |
          echo "${{ secrets.KUBECONFIG }}" | kubectl --kubeconfig=/dev/stdin cr eate configmap app-version --from-literal=CURRENT_VERSION=${{ env.NEXT_VERSION }} --dry-run=client -o yaml | kubectl --kubeconfig=/dev/stdin apply -f -

      # Checking health of new application versions
      - name: Check health of new application versions
        run: |
          # Checking health for Account application
          ACCOUNT_NEW_VERSION_POD=$(echo "${{ secrets.KUBECONFIG }}" | kubectl --kubeconfig=/dev/stdin get pods -l app=account,version=${{ env.NEXT_VERSION }} -n default -o jsonpath="{.items[0].metadata.name}")
          echo "${{ secrets.KUBECONFIG }}" | kubectl --kubeconfig=/dev/stdin wait --for=condition=ready pod $ACCOUNT_NEW_VERSION_POD --timeout=60s -n default
          # Checking health for Profile application
          PROFILE_NEW_VERSION_POD=$(echo "${{ secrets.KUBECONFIG }}" | kubectl --kubeconfig=/dev/stdin get pods -l app=profile,version=${{ env.NEXT_VERSION }} -n default -o jsonpath="{.items[0].metadata.name}")
          echo "${{ secrets.KUBECONFIG }}" | kubectl --kubeconfig=/dev/stdin wait --for=condition=ready pod $PROFILE_NEW_VERSION_POD --timeout=60s -n default

      # Switching traffic to the new version
      - name: Switch traffic to the new version
        run: |
          echo "${{ secrets.KUBECONFIG }}" | kubectl --kubeconfig=/dev/stdin patch ingress my-app-ingress -n default -p "{\"spec\":{\"rules\":[{\"http\":{\"paths\":[{\"path\":\"/account\",\"backend\":{\"service\":{\"name\":\"account-${{ env.NEXT_VERSION }}\",\"port\":{\"number\":80}}}}, {\"path\":\"/profile\",\"backend\":{\"service\":{\"name\":\"profile-${{ env.NEXT_VERSION }}\",\"port\":{\"number\":80}}}}]}}]}"

      # Step 9: Cleaning up old resources
      - name: Cleaning up old resources
        run: |
          echo "Cleaning up resources of the old application version..."
          PREVIOUS_VERSION=${{ env.CURRENT_VERSION }}
          if [[ "$PREVIOUS_VERSION" != "" ]]; then
            # Deleting old version of Account application
            echo "${{ secrets.KUBECONFIG }}" | helm --kubeconfig=/dev/stdin uninstall account-${PREVIOUS_VERSION} --namespace default
            # Deleting old version of Profile application
            echo "${{ secrets.KUBECONFIG }}" | helm --kubeconfig=/dev/stdin uninstall profile-${PREVIOUS_VERSION} --namespace default
            echo "Resources of the old application version account and profile have been successfully deleted."
          else
            echo "Fresh installation, no need to clean up old resources."
          fi
