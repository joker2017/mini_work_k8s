name: CI/CD with Blue-Green Deployment NEW

on:
  workflow_dispatch:

env:
  PROFILE_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/profile:${{ github.sha }}
  ACCOUNT_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/account:${{ github.sha }}
  FOLDER_ID: ${{ secrets.YANDEX_FOLDER_ID }}

jobs:

  lint-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.1

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          check-latest: true

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.6.0

      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          changed=$(ct list-changed --target-branch ${{ github.event.repository.default_branch }})
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Run chart-testing (lint)
        if: steps.list-changed.outputs.changed == 'true'
        run: ct lint --target-branch ${{ github.event.repository.default_branch }}

      - name: Create kind cluster
        if: steps.list-changed.outputs.changed == 'true'
        uses: helm/kind-action@v1.8.0

      - name: Run chart-testing (install)
        if: steps.list-changed.outputs.changed == 'true'
        run: ct install --target-branch ${{ github.event.repository.default_branch }}

  build-account:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./profile
          file: ./profile/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/account:${{ github.sha }}

  build-profile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./account
          file: ./account/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/profile:${{ github.sha }}

  deploy-in-k8s:
    runs-on: ubuntu-latest
    needs: [ build-profile, build-account, lint-test ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.2'

      - name: Install Yandex Cloud CLI non-interactively
        run: |
          curl https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash -s -- -i $HOME/.yandex-cloud -n
          echo "$HOME/.yandex-cloud/bin" >> $GITHUB_PATH

      - name: Save Kubeconfig to File
        run: |
          echo "${{ secrets.KUBECONFIG }}" > kubeconfig.yml
          chmod 600 kubeconfig.yml


      - name: Determine current and next versions
        run: |
          CURRENT_VERSION=$(kubectl --kubeconfig=kubeconfig.yml get configmap app-version -o=jsonpath='{.data.CURRENT_VERSION}' || echo "")
          if [[ "$CURRENT_VERSION" == "" ]]; then
            echo "This is a fresh install."
            NEXT_VERSION="green"
          elif [[ "$CURRENT_VERSION" == "blue" ]]; then
            NEXT_VERSION="green"
          else
            NEXT_VERSION="blue"
          fi
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Deploy applications using Helm
        run: |
          helm template my-release ./charts --set app.name=myapp,global.deploymentColor=green,service.type=ClusterIP,service.port=80,account.name=account,account.image.repository=myrepo/account,account.image.tag=latest,account.port=8080,profile.name=profile,profile.image.repository=myrepo/profile,profile.image.tag=latest,profile.port=8081


      #- name: Deploy applications using Helm
      #  run: |
      #    helm upgrade --install account-${{ env.NEXT_VERSION }} ./charts --set component=account,account.image.tag=${{ github.sha }},deploymentColor=${{ env.NEXT_VERSION }},ingress.manage=true --namespace default --create-namespace --kubeconfig=kubeconfig.yml
      #    helm upgrade --install profile-${{ env.NEXT_VERSION }} ./charts --set component=profile,profile.image.tag=${{ github.sha }},deploymentColor=${{ env.NEXT_VERSION }},ingress.manage=false --namespace default --create-namespace --kubeconfig=kubeconfig.yml

      - name: Deploy applications using Helm
        run: |
          helm upgrade --install minibank-${{ env.CURRENT_VERSION }} ./charts \
            --set account.image.tag=${{ github.sha }} \
            --set profile.image.tag=${{ github.sha }} \
            --set global.deploymentColor=${{ env.NEXT_VERSION }} \
            --set ingress.manage=true \
            --namespace default \
            --create-namespace \
            --kubeconfig=kubeconfig.yml


      - name: Check health of new application versions
        run: |
          # Получаем список всех подов для account и profile соответствующих NEXT_VERSION
          NEW_VERSION_PODS=$(kubectl --kubeconfig=kubeconfig.yml get pods -l "app=minibank-${{ env.CURRENT_VERSION }},environment=${{ env.NEXT_VERSION }}" -n default -o jsonpath="{.items[*].metadata.name}")
          # Если список не пустой, проверяем каждый под на готовность
          if [ -n "$NEW_VERSION_PODS" ]; then
            for pod in $NEW_VERSION_PODS; do
              echo "Checking readiness of pod $pod with version ${{ env.NEXT_VERSION }}"
              kubectl --kubeconfig=kubeconfig.yml wait --for=condition=ready pod $pod --timeout=60s -n default
            done
          else
            echo "No pods found for version ${{ env.NEXT_VERSION }}"
          fi
          
          
      

      - name: Switch traffic to the new version
        run: |
          # Проверяем, не пуста ли переменная CURRENT_VERSION
          if [ -n "${{ env.CURRENT_VERSION }}" ]; then
            # Если CURRENT_VERSION не пуста, проверяем дополнительные условия
            if [ "${{ env.CURRENT_VERSION }}" == "blue" ] || [ "${{ env.NEXT_VERSION }}" == "green" ]; then
              echo "Switching ingress to ${{ env.NEXT_VERSION }} version."
              kubectl --kubeconfig=kubeconfig.yml patch ingress "{{ .Values.app.name }}-ingress-{{ .Values.global.deploymentColor }}" -n default -p "{\"spec\":{\"rules\":[{\"http\":{\"paths\":[{\"path\":\"/account\",\"backend\":{\"service\":{\"name\":\"${{ .Values.app.name }}-account-${{ env.NEXT_VERSION }}\",\"port\":{\"number\":${{ .Values.account.service.port }}}}}, {\"path\":\"/profile\",\"backend\":{\"service\":{\"name\":\"${{ .Values.app.name }}-profile-${{ env.NEXT_VERSION }}\",\"port\":{\"number\":${{ .Values.profile.service.port }}}}}]}}]}"
            else
              echo "The conditions for switching ingress are not met."
            fi
          else
            echo "CURRENT_VERSION is empty, assuming a fresh installation. No need to switch ingress."
          fi
      
      

      - name: Cleaning up old resources
        run: |
          if [[ "${{ env.CURRENT_VERSION }}" != "" ]]; then
            echo "Uninstalling old Helm release for the version: ${{ env.CURRENT_VERSION }}"
            helm --kubeconfig=kubeconfig.yml uninstall minibank-${{ env.CURRENT_VERSION }} --namespace default
            echo "Resources of the old application version ${{ env.CURRENT_VERSION }} have been successfully deleted."
          else
            echo "Fresh installation, no need to clean up old resources."
      
      

      - name: Update current version information
        run: |
          kubectl --kubeconfig=kubeconfig.yml create configmap app-version \
            --from-literal=CURRENT_VERSION=${{ env.NEXT_VERSION }} \
            --dry-run=client -o yaml | kubectl apply -f - --namespace default
