name: CI/CD with Blue-Green Deployment NEW

on:
  workflow_dispatch:

env:
  PROFILE_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/profile:${{ github.sha }}
  ACCOUNT_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/account:${{ github.sha }}
  FOLDER_ID: ${{ secrets.YANDEX_FOLDER_ID }}

jobs:

  lint-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.1

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          check-latest: true

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.6.0

      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          changed=$(ct list-changed --target-branch ${{ github.event.repository.default_branch }})
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Run chart-testing (lint)
        if: steps.list-changed.outputs.changed == 'true'
        run: ct lint --target-branch ${{ github.event.repository.default_branch }}

      - name: Create kind cluster
        if: steps.list-changed.outputs.changed == 'true'
        uses: helm/kind-action@v1.8.0

      - name: Run chart-testing (install)
        if: steps.list-changed.outputs.changed == 'true'
        run: ct install --target-branch ${{ github.event.repository.default_branch }}

  build-account:
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/account:${{ github.sha }}

  build-profile:
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/profile:${{ github.sha }}

  deploy-in-k8s:
    runs-on: ubuntu-latest
    needs: [ build-profile, build-account, lint-test ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.2'

      - name: Install Yandex Cloud CLI non-interactively
        run: |
          curl https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash -s -- -i $HOME/.yandex-cloud -n
          echo "$HOME/.yandex-cloud/bin" >> $GITHUB_PATH

      - name: Save Kubeconfig to File
        run: |
          echo "${{ secrets.KUBECONFIG }}" > kubeconfig.yml
          chmod 600 kubeconfig.yml

      - name: Determine current and next versions
        run: |
          CURRENT_VERSION=$(kubectl --kubeconfig=kubeconfig.yml get configmap app-version -o=jsonpath='{.data.CURRENT_VERSION}' || echo "")
          if [[ "$CURRENT_VERSION" == "" ]]; then
            echo "This is a fresh install."
            NEXT_VERSION="green"
          elif [[ "$CURRENT_VERSION" == "blue" ]]; then
            NEXT_VERSION="green"
          else
            NEXT_VERSION="blue"
          fi
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Deploy applications using Helm
        run: |
          helm upgrade --install account-${{ env.NEXT_VERSION }} ./charts --set image=${{ secrets.DOCKER_HUB_USERNAME }}/account:${{ github.sha }},deploymentColor=${{ env.NEXT_VERSION }} --namespace default --create-namespace --kubeconfig=kubeconfig.yml
          helm upgrade --install profile-${{ env.NEXT_VERSION }} ./charts --set image=${{ secrets.DOCKER_HUB_USERNAME }}/profile:${{ github.sha }},deploymentColor=${{ env.NEXT_VERSION }} --namespace default --create-namespace --kubeconfig=kubeconfig.yml
          if [[ "$CURRENT_VERSION" == "" ]]; then
             kubectl --kubeconfig=kubeconfig.yml apply -f ./charts/templates/ingress.yaml
          fi

      - name: Update current version information
        run: |
          kubectl --kubeconfig=kubeconfig.yml create configmap app-version --from-literal=CURRENT_VERSION=${{ env.NEXT_VERSION }} --dry-run=client -o yaml | kubectl --kubeconfig=kubeconfig.yml apply -f -

      - name: Check health of new application versions
        run: |
          ACCOUNT_NEW_VERSION_POD=$(kubectl --kubeconfig=kubeconfig.yml get pods -l app=account,version=${{ env.NEXT_VERSION }} -n default -o jsonpath="{.items[0].metadata.name}")
          kubectl --kubeconfig=kubeconfig.yml wait --for=condition=ready pod $ACCOUNT_NEW_VERSION_POD --timeout=60s -n default
          PROFILE_NEW_VERSION_POD=$(kubectl --kubeconfig=kubeconfig.yml get pods -l app=profile,version=${{ env.NEXT_VERSION }} -n default -o jsonpath="{.items[0].metadata.name}")
          kubectl --kubeconfig=kubeconfig.yml wait --for=condition=ready pod $PROFILE_NEW_VERSION_POD --timeout=60s -n default

      - name: Switch traffic to the new version
        run: |
          kubectl --kubeconfig=kubeconfig.yml patch ingress my-app-ingress -n default -p "{\"spec\":{\"rules\":[{\"http\":{\"paths\":[{\"path\":\"/account\",\"backend\":{\"service\":{\"name\":\"account-${{ env.NEXT_VERSION }}\",\"port\":{\"number\":80}}}}, {\"path\":\"/profile\",\"backend\":{\"service\":{\"name\":\"profile-${{ env.NEXT_VERSION }}\",\"port\":{\"number\":80}}}}]}}]}"

      - name: Cleaning up old resources
        run: |
          if [[ "${{ env.CURRENT_VERSION }}" != "" ]]; then
            helm --kubeconfig=kubeconfig.yml uninstall account-${{ env.CURRENT_VERSION }} --namespace default
            helm --kubeconfig=kubeconfig.yml uninstall profile-${{ env.CURRENT_VERSION }} --namespace default
            echo "Resources of the old application version account and profile have been successfully deleted."
          else
            echo "Fresh installation, no need to clean up old resources."
