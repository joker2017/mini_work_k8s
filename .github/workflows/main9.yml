name: CI/CD with Blue-Green Deployment NEW

on:
  workflow_dispatch:

env:
  PROFILE_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/profile:${{ github.sha }}
  ACCOUNT_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/account:${{ github.sha }}
  FOLDER_ID: ${{ secrets.YANDEX_FOLDER_ID }}

jobs:

  lint-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.1

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          check-latest: true

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.6.0

      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          changed=$(ct list-changed --target-branch ${{ github.event.repository.default_branch }})
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Run chart-testing (lint)
        if: steps.list-changed.outputs.changed == 'true'
        run: ct lint --target-branch ${{ github.event.repository.default_branch }}

      - name: Create kind cluster
        if: steps.list-changed.outputs.changed == 'true'
        uses: helm/kind-action@v1.8.0

      - name: Run chart-testing (install)
        if: steps.list-changed.outputs.changed == 'true'
        run: ct install --target-branch ${{ github.event.repository.default_branch }}

  build-account:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./profile
          file: ./profile/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/account:${{ github.sha }}

  build-profile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./account
          file: ./account/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/profile:${{ github.sha }}

  deploy-in-k8s:
    runs-on: ubuntu-latest
    needs: [ build-profile, build-account, lint-test ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.2'

      - name: Install Yandex Cloud CLI non-interactively
        run: |
          curl https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash -s -- -i $HOME/.yandex-cloud -n
          echo "$HOME/.yandex-cloud/bin" >> $GITHUB_PATH

      - name: Save Kubeconfig to File
        run: |
          echo "${{ secrets.KUBECONFIG }}" > kubeconfig.yml
          chmod 600 kubeconfig.yml


      - name: Determine current and next versions
        run: |
          CURRENT_VERSION=$(kubectl --kubeconfig=kubeconfig.yml get configmap app-version -o=jsonpath='{.data.CURRENT_VERSION}' || echo "")
          if [[ "$CURRENT_VERSION" == "" ]]; then
            echo "This is a fresh install."
            NEXT_VERSION="green"
          elif [[ "$CURRENT_VERSION" == "blue" ]]; then
            NEXT_VERSION="green"
          else
            NEXT_VERSION="blue"
          fi
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Deploy applications using Helm
        run: |
          #helm upgrade --install app-${{ env.NEXT_VERSION }} ./.k8s/charts --set global.deploymentColor=blue,account.image.tag=${{ github.sha }},account.image.repository=${{ secrets.DOCKER_HUB_USERNAME }},profile.image.tag=${{ github.sha }},profile.image.repository=${{ secrets.DOCKER_HUB_USERNAME }} --namespace default --create-namespace --kubeconfig=kubeconfig.yml
          
          helm upgrade --install app-${{ env.NEXT_VERSION }} ./.k8s/charts --set global.deploymentColor=blue,account.image.tag=${{ github.sha }},account.image.repository=${{ secrets.DOCKER_HUB_USERNAME }},profile.image.tag=${{ github.sha }},profile.image.repository=${{ secrets.DOCKER_HUB_USERNAME }},account.version=${{ env.NEXT_VERSION }},profile.version=${{ env.NEXT_VERSION }} --namespace default --create-namespace --kubeconfig=kubeconfig.yml



      - name: Check health of new application versions
        run: |
          # Получаем время начала выполнения задания
           start_time=$(date +%s)
          
           # Переменная для хранения текущего времени
           current_time=$(date +%s)
          
           # Определение максимального времени ожидания в секундах
           max_wait=360
          
           # Цикл ожидания в течение максимального времени
           while [ $((current_time - start_time)) -lt $max_wait ]; do
              # Проверка готовности подов
              kubectl --kubeconfig=kubeconfig.yml wait --for=condition=ready pod -l "type=account,version=${{ env.NEXT_VERSION }}" --timeout=60s -n default >/dev/null 2>&1 &&
              kubectl --kubeconfig=kubeconfig.yml wait --for=condition=ready pod -l "type=profile,version=${{ env.NEXT_VERSION }}" --timeout=60s -n default >/dev/null 2>&1
          
              # Проверяем, что поды находятся в статусе Running
              if kubectl --kubeconfig=kubeconfig.yml get pod -l "type=account,version=${{ env.NEXT_VERSION }}" -n default | grep 'Running' >/dev/null && \
                 kubectl --kubeconfig=kubeconfig.yml get pod -l "type=profile,version=${{ env.NEXT_VERSION }}" -n default | grep 'Running' >/dev/null; then
                   echo "All pods are ready"
                   exit 0
              else
                  # Если не все компоненты готовы, ждем некоторое время и увеличиваем текущее время
                  sleep 10
                  current_time=$(date +%s)
              fi
           done
           echo "Timeout reached, not all pods are ready."
           exit 1
     
      
      
      

      - name: Check and deploy Ingress
        run: |
          CURRENT_VERSION="${{ env.CURRENT_VERSION }}"
          NEXT_VERSION="${{ env.NEXT_VERSION }}"
          RELEASE_NAME_CURRENT="release-ingress-$CURRENT_VERSION"
          RELEASE_NAME_NEXT="release-ingress-$NEXT_VERSION"

          # Проверяем существование Ingress следующей версии
          if ! kubectl get ingress $RELEASE_NAME_NEXT -n default --kubeconfig=kubeconfig.yml > /dev/null 2>&1; then
            # Если Ingress следующей версии не существует, проверяем существование текущей версии
            if ! kubectl get ingress $RELEASE_NAME_CURRENT -n default --kubeconfig=kubeconfig.yml > /dev/null 2>&1; then
                  echo "Ingress for current and next versions does not exist. Installing $RELEASE_NAME_NEXT..."
                  helm install $RELEASE_NAME_NEXT ./.k8s/ingress --namespace default --kubeconfig=kubeconfig.yml --debug
            else
                  echo "Upgrading $RELEASE_NAME_CURRENT to $RELEASE_NAME_NEXT..."
                  helm upgrade --install $RELEASE_NAME_NEXT ./.k8s/ingress --namespace default --kubeconfig=kubeconfig.yml --debug
            fi
          else
            echo "Ingress $RELEASE_NAME_NEXT already exists, no action required."
          fi



      
      
      

     # - name: Cleaning up old resources
     #   run: |
     #     if [[ "${CURRENT_VERSION}" != "" ]]; then
     #       # Проверяем, существует ли релиз
     #       if helm --kubeconfig=kubeconfig.yml list --namespace default --filter "^app-${env.CURRENT_VERSION}$" | grep -q "app-${env.CURRENT_VERSION}"; then
     #         echo "Uninstalling old Helm release for the version: ${env.CURRENT_VERSION}"
     #         helm --kubeconfig=kubeconfig.yml uninstall app-${env.CURRENT_VERSION} --namespace default
     #         echo "Resources of the old application version ${env.CURRENT_VERSION} have been successfully deleted."
     #       else
     #         echo "Release app-${CURRENT_VERSION} does not exist. Moving on to the next step."
     #       fi
     #     else
     #       echo "Version is not specified, no need to clean up old resources."
     #     fi


        
      
      

      - name: Update current version information
        run: |
          kubectl create configmap app-version --from-literal=CURRENT_VERSION=${{ env.NEXT_VERSION }} --dry-run=client -o yaml | kubectl apply -f - --namespace default --kubeconfig=kubeconfig.yml

