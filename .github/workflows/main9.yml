name: CI/CD with Blue-Green Deployment NEW

on:
  workflow_dispatch:

env:
  PROFILE_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/profile:${{ github.sha }}
  ACCOUNT_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/account:${{ github.sha }}
  FOLDER_ID: ${{ secrets.YANDEX_FOLDER_ID }}


jobs:

  lint-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.1

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          check-latest: true

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.6.0

      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          changed=$(ct list-changed --target-branch ${{ github.event.repository.default_branch }})
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Run chart-testing (lint)
        if: steps.list-changed.outputs.changed == 'true'
        run: ct lint --target-branch ${{ github.event.repository.default_branch }}

      - name: Create kind cluster
        if: steps.list-changed.outputs.changed == 'true'
        uses: helm/kind-action@v1.8.0

      - name: Run chart-testing (install)
        if: steps.list-changed.outputs.changed == 'true'
        run: ct install --target-branch ${{ github.event.repository.default_branch }}

  build-account:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./profile
          file: ./profile/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/account:${{ github.sha }}

  build-profile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./account
          file: ./account/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/profile:${{ github.sha }}

  deploy-in-k8s:
    runs-on: ubuntu-latest
    needs: [ build-profile, build-account, lint-test ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.2'

      - name: Install Yandex Cloud CLI non-interactively
        run: |
            curl https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash -s -- -i $HOME/.yandex-cloud -n
            echo "$HOME/.yandex-cloud/bin" >> $GITHUB_PATH

      - name: Save Kubeconfig to File
        run: |
            echo "${{ secrets.KUBECONFIG }}" > kubeconfig.yml
            chmod 600 kubeconfig.yml

      - name: Install Argo Rollouts CLI
        run: |
            curl -LO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
            chmod +x ./kubectl-argo-rollouts-linux-amd64
            sudo mv ./kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts
          


      - name: Deploy to Kubernetes
        run: |
            DATE=$(date +%Y%m%d-%H%M)
            COMMIT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
            RELEASE_NAME=myapp-${DATE}-${COMMIT_SHA}
          
            # Обновление Helm чартов с новым образом
            helm upgrade --install $RELEASE_NAME ./.k8s/charts/ --set account.image.tag=${{ github.sha }},profile.image.tag=${{ github.sha }} --namespace default --create-namespace --kubeconfig=kubeconfig.yml

            # Использование Argo Rollouts для начала процесса обновления
            kubectl argo rollouts -n default restart rollout account-rollout --kubeconfig=kubeconfig.yml
            kubectl argo rollouts -n default restart rollout profile-rollout --kubeconfig=kubeconfig.yml

      #Проверка здоровья развертывания
      - name: Check health of new application versions
        run: |
            # Ожидание, пока развертывание не станет здоровым
            kubectl argo rollouts -n default wait rollout profile-rollout --for condition=Healthy --kubeconfig=kubeconfig.yml
            kubectl argo rollouts -n default wait rollout account-rollout --for condition=Healthy --kubeconfig=kubeconfig.yml
            # Здесь можно добавить дополнительные тесты для проверки работоспособности приложения
            # Пример проверки доступности HTTP эндпоинта
            # curl --fail http://myapp.example.com/health || exit 1

      #Продвижение развертывания
      - name: Promote Rollout
        run: |
            # Промоушн новой версии после успешной проверки
            kubectl argo rollouts -n default promote profile-rollout --kubeconfig=kubeconfig.yml
            kubectl argo rollouts -n default promote account-rollout --kubeconfig=kubeconfig.yml
     
      
      
      

