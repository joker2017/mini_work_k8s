name: CI/CD with Blue-Green Deployment NEW

on:
  workflow_dispatch:

env:
  PROFILE_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/profile:${{ github.sha }}
  ACCOUNT_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/account:${{ github.sha }}
  FOLDER_ID: ${{ secrets.YANDEX_FOLDER_ID }}

jobs:


  deploy-in-k8s:
    runs-on: ubuntu-latest
    needs: [build-profile, build-account, lint-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.2'

      - name: Install Yandex Cloud CLI non-interactively
        run: |
          curl https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash -s -- -i $HOME/.yandex-cloud -n
          echo "$HOME/.yandex-cloud/bin" >> $GITHUB_PATH

      - name: Save Kubeconfig to File
        run: |
          echo "${{ secrets.KUBECONFIG }}" > kubeconfig.yml
          chmod 600 kubeconfig.yml

      # Обновите использование Kubeconfig в последующих шагах:
      - name: Deploy applications using Helm
        run: |
          # Deploying Account application
          helm upgrade --install account-${{ env.NEXT_VERSION }} ./chart --set image=${{ env.ACCOUNT_IMAGE }},deploymentColor=${{ env.NEXT_VERSION }} --namespace default --create-namespace --kubeconfig=kubeconfig.yml
          # Deploying Profile application
          helm upgrade --install profile-${{ env.NEXT_VERSION }} ./chart --set image=${{ env.PROFILE_IMAGE }},deploymentColor=${{ env.NEXT_VERSION }} --namespace default --create-namespace --kubeconfig=kubeconfig.yml

      # Обновите все последующие команды kubectl для использования kubeconfig.yml
      - name: Update current version information
        run: |
          kubectl create configmap app-version --from-literal=CURRENT_VERSION=${{ env.NEXT_VERSION }} --dry-run=client -o yaml | kubectl apply -f - --kubeconfig=kubeconfig.yml

      - name: Check health of new application versions
        run: |
          # Пример проверки готовности для Account и Profile
          kubectl wait --for=condition=ready pod -l app=account,version=${{ env.NEXT_VERSION }} --timeout=60s --namespace default --kubeconfig=kubeconfig.yml
          kubectl wait --for=condition=ready pod -l app=profile,version=${{ env.NEXT_VERSION }} --timeout=60s --namespace default --kubeconfig=kubeconfig.yml

      - name: Switch traffic to the new version
        run: |
          kubectl patch ingress my-app-ingress -n default -p "{\"spec\":{\"rules\":[{\"http\":{\"paths\":[{\"path\":\"/account\",\"backend\":{\"service\":{\"name\":\"account-${{ env.NEXT_VERSION }}\",\"port\":{\"number\":80}}}}, {\"path\":\"/profile\",\"backend\":{\"service\":{\"name\":\"profile-${{ env.NEXT_VERSION }}\",\"port\":{\"number\":80}}}}]}}]}" --kubeconfig=kubeconfig.yml

      - name: Cleaning up old resources
        run: |
          if [[ "${{ env.CURRENT_VERSION }}" != "" ]]; then
            helm uninstall account-${{ env.CURRENT_VERSION }} --namespace default --kubeconfig=kubeconfig.yml
            helm uninstall profile-${{ env.CURRENT_VERSION }} --namespace default --kubeconfig=kubeconfig.yml
          fi
