from django.db import models
from hashlib import sha256


# User model representing a user in the system
class Users(models.Model):
    """
    User model with custom fields and hashing password functionality.

    Attributes:
        id: A unique identifier for the user, not generated by Django's default auto-increment.
        full_names: The full name of the user.
        username: A unique username for user identification.
        email: User's email address.
        password: User's password, stored as a hashed value for security.
    """
    id = models.CharField(
        primary_key=True,
        max_length=20,
        blank=True,
        editable=False,
        unique=True,
    )
    full_names = models.CharField(max_length=255)  # User's full name
    username = models.CharField(max_length=255)  # Unique username
    email = models.EmailField(max_length=255)  # User's email address
    password = models.CharField(max_length=255)  # Hashed password

    def save(self, *args, **kwargs):
        """
        Overriding the save method to hash the password before saving to the database.
        """
        if self.password:
            self.password = sha256(self.password.encode('utf-8')).hexdigest()
        super().save(*args, **kwargs)

    def __str__(self):
        """
        String representation of the Users model.
        """
        return f'{self.full_names} {self.username}'


# Account model representing a user's account
class Account(models.Model):
    """
    Account model linking to the Users model and storing account balance.

    Attributes:
        id: A unique identifier for the account, not generated by Django's default auto-increment.
        balance: The monetary balance of the account.
        usernameid: A ForeignKey linking to a specific user in the Users model.
    """
    id = models.CharField(
        primary_key=True,
        max_length=20,
        blank=True,
        editable=False,
        unique=True,
    )
    balance = models.DecimalField(
        default=0,
        max_digits=20,
        decimal_places=2
    )
    usernameid = models.ForeignKey('Users', default='null', on_delete=models.PROTECT, null=True, related_name='users',
                                   blank=True)

    def __str__(self):
        """
        String representation of the Account model.
        """
        return '__all__'  # Placeholder for a more descriptive string representation

    class Meta:
        managed = False
        db_table = 'account_account'
